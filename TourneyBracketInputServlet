package TBV2;

import java.io.IOException;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.awt.Button;
 

/**
 * Servlet implementation class TourneyBracketOutputs
 */
@WebServlet("/TourneyBracketInputsServlet")
public class TourneyBracketInputServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public TourneyBracketInputServlet() {
        super();

    }

    //put following in in an HTTP Session object
    //Tourney mainTourney = new Tourney() . userName, displayName, naminTourney.run()
	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String name = request.getParameter("userName");
		System.out.println("User name is :" + name);
		Tourney mainTourney = new Tourney();
		String[] displayNames = mainTourney.demoNames;
		//System.out.println("Demo name is : " + demoNames);
		System.out.println(name);
		//mainTourney.run();
        request.setAttribute("mainTourney", mainTourney);
        request.setAttribute("displayNames", displayNames);

        RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/TourneyInputUserForm.jsp");
        if (dispatcher != null) {
              dispatcher.forward(request, response);
        }
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
/*		
		//write new servlet for in progress tourney(s) and sub in the name
        RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/TourneyInputUserForm.jsp");
        if (dispatcher != null) {
              dispatcher.forward(request, response);
        }*/
	}
}

